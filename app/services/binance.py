from datetime import datetime

import requests
from app.__init__ import asset
from app.database.crud import upsert_asset_price
from app.database.init_engine import AsyncSessionLocal

import requests
from app.__init__ import asset
from app.database.crud import upsert_asset_price, get_asset_price
from app.database.init_engine import AsyncSessionLocal

async def get_prices():
    ans = '–¶–µ–Ω—ã Binance –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç:\n'
    async with AsyncSessionLocal() as session:
        for pair in asset:
            response = requests.get(f"https://api.binance.com/api/v3/ticker/price?symbol={pair}")
            data = response.json()

            price = round(float(data["price"]), 2)

            db_data = await get_asset_price(session, symbol=data["symbol"])

            if db_data:
                prev_price = db_data.prev_price
                if prev_price != 0:
                    percent_change = round(((price - prev_price) / prev_price) * 100, 2)
                    change_indicator = "üìà" if percent_change >= 0 else "üìâ"
                    change_indicator1 = "üü¢" if percent_change >= 0 else "üî¥"
                    ans += f"{pair}: {price}    |    ({change_indicator} {percent_change}% {change_indicator1})\n"
                else:
                    ans += f"{pair}: {price}    |   (–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)\n"
            else:
                ans += f"{pair}: {price}   |    (–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)\n"

            await upsert_asset_price(
                session=session,
                symbol=data["symbol"],
                name=asset[data["symbol"]],
                price=price
            )
    ans += f'\n*–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —Å–¥–µ–ª–∞–Ω–Ω–æ–≥–æ –≤ {datetime.strptime("2025-04-28 19:46:00.734669 UTC", "%Y-%m-%d %H:%M:%S.%f UTC").strftime("%H:%M %d-%m")} UTC.'
    print(ans)
    return ans
