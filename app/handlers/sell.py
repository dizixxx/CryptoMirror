from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.services.binance import get_prices
from app.database.init_engine import AsyncSessionLocal
from app.database.crud import get_user_balance, update_balance
from app.database.models import Trade

router = Router()


def add_cancel_button(keyboard: InlineKeyboardBuilder = None) -> InlineKeyboardBuilder:
    if keyboard is None:
        keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(
        text="‚ùå –†–∞–∑–æ—Ä–≤–∞—Ç—å —Å–¥–µ–ª–∫—É",
        callback_data="cancel_deal"
    ))
    return keyboard


class SellStates(StatesGroup):
    choosing_asset = State()
    entering_amount = State()
    confirming = State()


@router.message(Command("sell"))
async def cmd_sell(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ - –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞"""
    user_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        balance_info = await get_user_balance(session, user_id)
        assets = [b["symbol"] for b in balance_info if b["symbol"] != "USDT" and b["total_amount"] > 0]

    if not assets:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
        return

    builder = InlineKeyboardBuilder()
    for asset in assets:
        builder.button(text=asset, callback_data=f"asset_{asset}")
    builder.adjust(2)
    builder = add_cancel_button(builder)

    sent_message = await message.answer(
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=builder.as_markup(),
    )

    await state.update_data(bot_message_id=sent_message.message_id)
    await message.delete()
    await state.set_state(SellStates.choosing_asset)


@router.callback_query(SellStates.choosing_asset, F.data.startswith("asset_"))
async def asset_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    data = await state.get_data()
    asset = callback.data.split("_")[1]

    user_id = callback.from_user.id
    async with AsyncSessionLocal() as session:
        balance_info = await get_user_balance(session, user_id)
        available = next((b["total_amount"] for b in balance_info if b["symbol"] == asset), 0.0)

    builder = add_cancel_button()

    await callback.bot.edit_message_text(
        f"üí∞ –í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤: {asset}\n"
        f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.6f} {asset}\n\n"
        f"üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {asset} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        chat_id=callback.message.chat.id,
        message_id=data["bot_message_id"],
        reply_markup=builder.as_markup()
    )

    await state.update_data(chosen_asset=asset, available_amount=available)
    await state.set_state(SellStates.entering_amount)
    await callback.answer()


@router.message(SellStates.entering_amount, F.text)
async def amount_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    data = await state.get_data()
    asset = data["chosen_asset"]
    available = data["available_amount"]

    await message.delete()

    try:
        asset_amount = float(message.text.replace(",", "."))
        if asset_amount <= 0:
            raise ValueError

        if asset_amount > available:
            builder = add_cancel_button()

            await message.bot.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {asset}. –î–æ—Å—Ç—É–ø–Ω–æ: {available:.6f}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {asset}:",
                chat_id=message.chat.id,
                message_id=data["bot_message_id"],
                reply_markup=builder.as_markup()
            )
            return

        async with AsyncSessionLocal() as session:
            price_data = await get_prices(f"{asset}")
            price = float(price_data["price"])
            usdt_amount = asset_amount * price

            await state.update_data(
                usdt_amount=usdt_amount,
                price=price,
                asset_amount=asset_amount
            )

            builder = InlineKeyboardBuilder()
            builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes")
            builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm_change")
            builder = add_cancel_button(builder)
            builder.adjust(2)

            await message.bot.edit_message_text(
                f"üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É:\n\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤: {asset}\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {asset_amount:.6f} {asset}\n"
                f"‚Ä¢ –ö—É—Ä—Å: {price:.2f} USDT\n"
                f"‚Ä¢ –°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {usdt_amount:.2f} USDT",
                chat_id=message.chat.id,
                message_id=data["bot_message_id"],
                reply_markup=builder.as_markup()
            )
            await state.set_state(SellStates.confirming)

    except ValueError:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="retry_amount")
        builder = add_cancel_button(builder)
        builder.adjust(2)

        await message.bot.edit_message_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            chat_id=message.chat.id,
            message_id=data["bot_message_id"],
            reply_markup=builder.as_markup()
        )


@router.callback_query(SellStates.entering_amount, F.data == "retry_amount")
async def retry_amount(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    data = await state.get_data()
    asset = data.get("chosen_asset", "–∞–∫—Ç–∏–≤–∞")

    builder = add_cancel_button()

    await callback.bot.edit_message_text(
        f"üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {asset} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        chat_id=callback.message.chat.id,
        message_id=data["bot_message_id"],
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(SellStates.confirming, F.data.startswith("confirm_"))
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏"""
    action = callback.data.split("_")[1]
    data = await state.get_data()
    user_id = callback.from_user.id

    if action == "yes":
        async with AsyncSessionLocal() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            await update_balance(session, user_id, data["chosen_asset"], -data["asset_amount"])
            await update_balance(session, user_id, "USDT", data["usdt_amount"])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
            trade = Trade(
                user_id=user_id,
                symbol=data["chosen_asset"],
                amount=-data["asset_amount"],
                price=data["price"],
            )
            session.add(trade)
            await session.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–µ
            success_message = (
                "‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                f"‚ñ´Ô∏è –ê–∫—Ç–∏–≤: {data['chosen_asset']}\n"
                f"‚ñ´Ô∏è –ü—Ä–æ–¥–∞–Ω–æ: {data['asset_amount']:.6f} {data['chosen_asset']}\n"
                f"‚ñ´Ô∏è –ü–æ –∫—É—Ä—Å—É: {data['price']:.2f} USDT\n"
                f"‚ñ´Ô∏è –ó–∞—á–∏—Å–ª–µ–Ω–æ: {data['usdt_amount']:.2f} USDT\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
            )

            await callback.bot.edit_message_text(
                success_message,
                chat_id=callback.message.chat.id,
                message_id=data["bot_message_id"],
                reply_markup=None
            )
            await state.clear()

    elif action == "change":
        builder = add_cancel_button()

        await callback.bot.edit_message_text(
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {data['chosen_asset']}:",
            chat_id=callback.message.chat.id,
            message_id=data["bot_message_id"],
            reply_markup=builder.as_markup()
        )
        await state.set_state(SellStates.entering_amount)
        await callback.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")


@router.callback_query(F.data == "cancel_deal")
async def handle_cancel_deal(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    await callback.bot.edit_message_text(
        "‚ùå –°–¥–µ–ª–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell",
        chat_id=callback.message.chat.id,
        message_id=data["bot_message_id"],
        reply_markup=None
    )

    await state.clear()
    await callback.answer("–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")