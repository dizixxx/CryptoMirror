from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

@router.message(Command('help'))
async def cmd_help(message: Message):
    response = (
        "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "–í—Å–µ –ø—Ä–æ—Å—Ç–æ! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üöÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å\n"
        "/help - –≠—Ç–æ –æ–∫–Ω–æ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏\n"
        "/prices - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã —Ç–æ–ø-5 –ø–∞—Ä\n\n"
        "üíº <b>–¢–æ—Ä–≥–æ–≤–ª—è:</b>\n"
        "/buy - –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É (–≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä—É ‚Üí —Å—É–º–º—É ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å)\n"
        "/sell - –ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–æ–∫—É–ø–∫–µ)\n\n"
        "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
        "/balance - –¢–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–æ–≤\n\n"
        "üí° <b>–ö–∞–∫ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å?</b>\n"
        "1. –ü—Ä–æ–≤–µ—Ä—å —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ /prices\n"
        "2. –í—ã–±–µ—Ä–∏ /buy –∏–ª–∏ /sell\n"
        "3. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
        "4. –°–ª–µ–¥–∏ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º –≤ /balance\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>BTC: 0.00146 ‚Üí $68800 (+0.45%)</code>\n\n"
        "üö® –í—Å–µ —Å–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
        callback_data=f"delete_messages_{message.from_user.id}_{message.message_id}"
    ))

    sent_message = await message.answer(
        text=response,
        reply_markup=builder.as_markup()
    )

    builder_with_both = InlineKeyboardBuilder()
    builder_with_both.add(InlineKeyboardButton(
        text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
        callback_data=f"delete_messages_{message.from_user.id}_{message.message_id}_{sent_message.message_id}"
    ))

    await sent_message.edit_reply_markup(reply_markup=builder_with_both.as_markup())


@router.callback_query(F.data.startswith("delete_messages_"))
async def delete_messages(callback_query: types.CallbackQuery):
    parts = callback_query.data.split("_")
    user_id = int(parts[2])
    message1_id = int(parts[3])
    message2_id = int(parts[4]) if len(parts) > 4 else None

    if callback_query.from_user.id == user_id:
        try:
            await callback_query.bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=message1_id
            )
            if message2_id:
                await callback_query.bot.delete_message(
                    chat_id=callback_query.message.chat.id,
                    message_id=message2_id
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    await callback_query.answer()