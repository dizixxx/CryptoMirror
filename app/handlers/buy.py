from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.services.binance import get_prices
from app.database.init_engine import AsyncSessionLocal
from app.database.crud import get_user_balance, update_balance
from app.database.models import Trade
from app.__init__ import asset

router = Router()

#
# class BuyStates(StatesGroup):
#     choosing_pair = State()
#     entering_amount = State()
#     confirming = State()
#
#
# async def edit_or_resend(bot, chat_id, state, new_text, reply_markup=None):
#     data = await state.get_data()
#     message_id = data.get('buy_message_id')
#
#     try:
#         if message_id:
#             try:
#                 await bot.edit_message_text(
#                     chat_id=chat_id,
#                     message_id=message_id,
#                     text=new_text,
#                     reply_markup=reply_markup
#                 )
#                 return message_id
#             except Exception:
#                 pass
#
#     except KeyError:
#         pass
#
#     new_msg = await bot.send_message(chat_id, new_text, reply_markup=reply_markup)
#     await state.update_data(buy_message_id=new_msg.message_id)
#     return new_msg.message_id
#
#
# @router.message(Command("buy"))
# async def cmd_buy(message: types.Message, state: FSMContext):
#     await state.clear()
#     await state.set_state(BuyStates.choosing_pair)
#
#     pairs = [k for k in asset.keys() if k != "USDT"]
#     builder = InlineKeyboardBuilder()
#
#     for pair in pairs:
#         builder.button(text=pair, callback_data=f"buy_pair_{pair}")
#     builder.adjust(2)
#
#     await edit_or_resend(
#         message.bot,
#         message.chat.id,
#         state,
#         "üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:",
#         builder.as_markup()
#     )
#     await message.delete()
#
#
# @router.callback_query(F.data.startswith("buy_pair_"))
# async def pair_chosen(callback: types.CallbackQuery, state: FSMContext):
#     pair = callback.data.split("_")[2]
#     await state.update_data(chosen_pair=pair)
#     await state.set_state(BuyStates.entering_amount)
#
#     await edit_or_resend(
#         callback.bot,
#         callback.message.chat.id,
#         state,
#         f"üìà –í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {pair}\nüíµ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {pair} –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
#         None
#     )
#     await callback.answer()
#
#
# @router.message(BuyStates.entering_amount, F.text)
# async def amount_entered(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     pair = data["chosen_pair"]
#
#     try:
#         asset_amount = float(message.text.replace(",", "."))
#         if asset_amount <= 0:
#             raise ValueError
#     except ValueError:
#         builder = InlineKeyboardBuilder()
#         builder.button(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="buy_retry")
#         builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="buy_cancel")
#         builder.adjust(2)
#
#         await edit_or_resend(
#             message.bot,
#             message.chat.id,
#             state,
#             "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
#             builder.as_markup()
#         )
#         await message.delete()
#         return
#
#     async with AsyncSessionLocal() as session:
#         price_data = await get_prices(f"{pair}")
#         price = float(price_data["price"])
#         usdt_amount = asset_amount * price
#
#         balance_info = await get_user_balance(session, message.from_user.id)
#         usdt_balance = next((b["total_amount"] for b in balance_info if b["symbol"] == "USDT"), 0)
#
#         if usdt_balance < usdt_amount:
#             await edit_or_resend(
#                 message.bot,
#                 message.chat.id,
#                 state,
#                 f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT. –ù—É–∂–Ω–æ: {usdt_amount:.2f}\n–î–æ—Å—Ç—É–ø–Ω–æ: {usdt_balance:.2f}",
#                 None
#             )
#             await state.clear()
#             await message.delete()
#             return
#
#         await state.update_data(
#             usdt_amount=usdt_amount,
#             price=price,
#             asset_amount=asset_amount
#         )
#
#     builder = InlineKeyboardBuilder()
#     builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_confirm")
#     builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="buy_retry")
#     builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="buy_cancel")
#     builder.adjust(2)
#
#     text = (
#         f"üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:\n\n"
#         f"‚Ä¢ –ü–∞—Ä–∞: {pair}\n"
#         f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {asset_amount:.6f}\n"
#         f"‚Ä¢ –¶–µ–Ω–∞: {price:.2f} USDT\n"
#         f"‚Ä¢ –ò—Ç–æ–≥–æ: {usdt_amount:.2f} USDT"
#     )
#
#     await edit_or_resend(
#         message.bot,
#         message.chat.id,
#         state,
#         text,
#         builder.as_markup()
#     )
#     await message.delete()
#
#
# @router.callback_query(F.data == "buy_retry")
# async def retry_amount(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     await edit_or_resend(
#         callback.bot,
#         callback.message.chat.id,
#         state,
#         f"üíµ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {data['chosen_pair']}:",
#         None
#     )
#     await callback.answer()
#
#
# @router.callback_query(F.data == "buy_cancel")
# async def cancel_buy(callback: types.CallbackQuery, state: FSMContext):
#     await state.clear()
#     await edit_or_resend(
#         callback.bot,
#         callback.message.chat.id,
#         state,
#         "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
#         None
#     )
#     await callback.answer()
#
#
# @router.callback_query(F.data == "buy_confirm")
# async def confirm_buy(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#
#     async with AsyncSessionLocal() as session:
#         await update_balance(session, callback.from_user.id, "USDT", -data["usdt_amount"])
#         await update_balance(session, callback.from_user.id, data["chosen_pair"], data["asset_amount"])
#
#         trade = Trade(
#             user_id=callback.from_user.id,
#             symbol=data["chosen_pair"],
#             amount=data["asset_amount"],
#             price=data["price"],
#         )
#         session.add(trade)
#         await session.commit()
#
#     await edit_or_resend(
#         callback.bot,
#         callback.message.chat.id,
#         state,
#         f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ {data['asset_amount']:.6f} {data['chosen_pair']} –∑–∞ {data['usdt_amount']:.2f} USDT",
#         None
#     )
#     await state.clear()
#     await callback.answer()
#
#
# @router.message()
# async def handle_other_messages(message: types.Message, state: FSMContext):
#     """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏"""
#     current_state = await state.get_state()
#     if current_state in BuyStates.__all_states__:
#         await message.delete()
#         msg = await message.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")
#         await msg.delete(delay=3)